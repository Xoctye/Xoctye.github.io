<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>知识积累 on Shredder&#39;s Blog</title>
    <link>https://xoctye.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/</link>
    <description>Recent content in 知识积累 on Shredder&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Wed, 22 Jan 2025 10:12:38 +0000</lastBuildDate>
    <atom:link href="https://xoctye.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>密码学</title>
      <link>https://xoctye.github.io/posts/cryptography/</link>
      <pubDate>Wed, 22 Jan 2025 10:12:38 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/cryptography/</guid>
      <description>&lt;h3 id=&#34;密码学的数学基础&#34;&gt;密码学的数学基础&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;https:&lt;span style=&#34;font-style:italic&#34;&gt;//www.bilibili.com/video/BV1bY411G7sY&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;整除性&lt;span style=&#34;&#34;&gt;：&lt;/span&gt;b整除a  (b|a)   a=qb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://xoctye.github.io/images/mm0001.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/mm0002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;最大公约数&lt;span style=&#34;&#34;&gt;，&lt;/span&gt;记作 gcd(a,b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;最大公约数只能是0或正整数&lt;span style=&#34;&#34;&gt;，&lt;/span&gt;不能是负的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://xoctye.github.io/images/mm0003.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;](https://www.bilibili.com/video/BV1x5411R7qP?t=21.9)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>计算机网络</title>
      <link>https://xoctye.github.io/posts/computernetwork/</link>
      <pubDate>Tue, 17 Dec 2024 18:29:07 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/computernetwork/</guid>
      <description></description>
    </item>
    <item>
      <title>操作系统</title>
      <link>https://xoctye.github.io/posts/os/</link>
      <pubDate>Tue, 17 Dec 2024 18:26:40 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/os/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Xm411f7CM/&#34;&gt;2024南京大学“操作系统：设计与实现”&lt;/a&gt;&#xA;&lt;a href=&#34;https://www.geeksforgeeks.org/strace-command-in-linux-with-examples/&#34;&gt;strace的用法&lt;/a&gt;&#xA;编译优化：函数内联、常量传播、死代码消除&#xA;应用视角的操作系统、硬件视角的操作系统&#xA;数学视角：程序=初始状态+迁移函数&#xA;绪论看完了&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构</title>
      <link>https://xoctye.github.io/posts/datastructure/</link>
      <pubDate>Mon, 16 Dec 2024 19:51:44 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/datastructure/</guid>
      <description></description>
    </item>
    <item>
      <title>计算机组成原理</title>
      <link>https://xoctye.github.io/posts/jz/</link>
      <pubDate>Mon, 16 Dec 2024 15:20:07 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/jz/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/554546968&#34;&gt;计算机组成原理(万字爆肝整理)&lt;/a&gt;&#xA;机器字长、存储字长、指令字长&#xA;移码：在补码的基础上符号位取反。且移码只能表示整数。表示范围和补码相同。&#xA;进位标志CF (Carry Flag)只对无符号运算有意义&#xA;符号标志SF (Sign Flag)只对有符号运算有意义&#xA;溢出标志OF (Overflow Flag)只对有符号运算有意义&#xA;原码一位乘法、原码两位乘法、补码一位乘法、补码两位乘法&lt;/p&gt;&#xA;&lt;p&gt;原码两位乘法：&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;补码一位乘法：&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;补码两位乘法：&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0003.png&#34; alt=&#34;&#34;&gt;&#xA;SRAM和DRAM&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0005.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1nu4m1K7fv&#34;&gt;计算机组成原理微课堂&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;第一章&#34;&gt;第一章&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://xoctye.github.io/images/jz0006.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0007.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0008.png&#34; alt=&#34;&#34;&gt;&#xA;存储器：主存储器+辅助存储器&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0010.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0011.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0012.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0013.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0014.png&#34; alt=&#34;&#34;&gt;&#xA;运算器相关的寄存器：累加器ACC、乘商寄存器MQ、操作数寄存器X&#xA;控制器相关的寄存器：程序计数器PC、指令寄存器IR&#xA;主存储器：存储体、存储器地址寄存器MAR、存储器数据寄存器MDR&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0015.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0016.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0017.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;第二章&#34;&gt;第二章&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://xoctye.github.io/images/jz0019.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0020.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;第三章&#34;&gt;第三章&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://xoctye.github.io/images/jz0021.png&#34; alt=&#34;&#34;&gt;&#xA;溢出检测：&#xA;方法一：根据操作数的符号位与运算结果的符号位是否一致进行判断（两个操作数相加时，当它们的符号位相同时，才可能发生溢出）&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0022.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/jz0023.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;a href=&#34;https://www.bilibili.com/video/BV1qr421t7uk?t=694.4&#34;&gt;https://www.bilibili.com/video/BV1qr421t7uk?t=694.4&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入解析Windows操作系统</title>
      <link>https://xoctye.github.io/posts/windowsinternals/</link>
      <pubDate>Thu, 21 Nov 2024 10:12:08 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/windowsinternals/</guid>
      <description>&lt;h2 id=&#34;第一章&#34;&gt;第一章&lt;/h2&gt;&#xA;&lt;p&gt;创建服务相关函数：OpenSCManger, QueryServiceStatus, CreateService, StartService, ChangeServiceConfig, ControlService, DeleteService&#xA;窗口句柄、PID、模块名称、COM组件、.NET&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;第二章&#34;&gt;第二章&lt;/h2&gt;&#xA;&lt;p&gt;windows核心组件的文件名&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;文件名&lt;/th&gt;&#xA;          &lt;th&gt;组件&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ntoskrnl.exe&lt;/td&gt;&#xA;          &lt;td&gt;执行体和内核&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;hal.dll&lt;/td&gt;&#xA;          &lt;td&gt;HAL&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;win32k.sys&lt;/td&gt;&#xA;          &lt;td&gt;windows子系统的内核模式部分&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;hvix64.exe&lt;/td&gt;&#xA;          &lt;td&gt;虚拟机监控程序&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;\systemroot\system32\drivers下的.sys文件&lt;/td&gt;&#xA;          &lt;td&gt;核心驱动程序&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ntdll.dll&lt;/td&gt;&#xA;          &lt;td&gt;内部支持函数，以及执行体函数的系统服务分发存根&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;kernel32.dll、user32.dll、gdi32.dll&lt;/td&gt;&#xA;          &lt;td&gt;核心windows子系统dll&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;smss.exe(会话管理器)是系统创建的第一个用户模式进程。&lt;br&gt;&#xA;服务控制管理器（service control manager）是一种由services.exe映像运行的特殊系统进程，负责服务进程的启动、停止和交互。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;第三章&#34;&gt;第三章&lt;/h2&gt;&#xA;&lt;p&gt;创建进程相关函数：CreateProcess、CreateProcessWithLogonW、CreateProcessWithTokenW&#xA;&lt;img src=&#34;https://xoctye.github.io/images/wi0001.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://xoctye.github.io/images/wi0002.png&#34; alt=&#34;&#34;&gt;&#xA;每个windows进程都可以用一种执行体进程结构（EPROCESS）来表示&amp;hellip;每个线程都可以用一个执行体线程结构（ETHREAD）来表示。&#xA;EPROCESS及其大部分相关数据结构都位于系统地址空间中，唯一的例外是进程环境块（PEB），它位于进程（用户）地址空间中（因为它包含了由用户模式代码访问的信息）。&lt;br&gt;&#xA;除了Idle进程，每个EPROCESS结构都会被执行体对象管理器封装为进程对象。&#xA;&lt;img src=&#34;https://xoctye.github.io/images/wi0003.png&#34; alt=&#34;&#34;&gt;&#xA;执行体进程结构的第一个成员名为进程控制块（ProcessControl Block, PCB）,这是一种KPROCESS类型的结构，专用于内核进程。&#xA;&lt;img src=&#34;https://xoctye.github.io/images/wi0004.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kd&amp;gt; dt nt!_eprocess&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   +0x000 Pcb              : _KPROCESS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   +0x0ec DebugPort        : Ptr32 Void&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于KPROCESS位于EPROCESS的首位，EPROCESS的地址通常也可以作为KPROCESS的地址用于dt_kprocess中。&#xA;&lt;img src=&#34;https://xoctye.github.io/images/wi0005.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;第四章&#34;&gt;第四章&lt;/h2&gt;</description>
    </item>
    <item>
      <title>编译原理</title>
      <link>https://xoctye.github.io/posts/moderncompilerimplementationinc/</link>
      <pubDate>Tue, 19 Nov 2024 17:02:03 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/moderncompilerimplementationinc/</guid>
      <description>&lt;h1 id=&#34;视频&#34;&gt;视频&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1P4411e7gm&#34;&gt;编译原理&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;第一章&#34;&gt;第一章&lt;/h2&gt;&#xA;&lt;p&gt;命令式语言、申述式语言、面向对象语言&lt;br&gt;&#xA;编译、解释&#xA;&lt;img src=&#34;https://xoctye.github.io/images/hit0001.png&#34; alt=&#34;&#34;&gt;&#xA;词法分析：输入：源程序，输出：单词&lt;br&gt;&#xA;语法分析（“组词成句”）：输入：token序列，输出：语法成分&#xA;&lt;img src=&#34;https://xoctye.github.io/images/hit0002.png&#34; alt=&#34;&#34;&gt;&#xA;语义分析（semantic analysis）一般和语法分析同时进行，成为语法制导翻译&#xA;&lt;img src=&#34;https://xoctye.github.io/images/hi0003.png&#34; alt=&#34;&#34;&gt;&#xA;中间代码生成&#xA;&lt;img src=&#34;https://xoctye.github.io/images/hit0005.png&#34; alt=&#34;&#34;&gt;&#xA;代码优化&lt;br&gt;&#xA;局部优化：常量合并、公共子表达式的提取&lt;br&gt;&#xA;循环优化：强度削减、代码外提&lt;br&gt;&#xA;寄存器的利用&lt;br&gt;&#xA;体系结构&lt;br&gt;&#xA;存储策略&lt;br&gt;&#xA;目标代码生成&lt;br&gt;&#xA;表格管理&lt;br&gt;&#xA;错误处理&#xA;&lt;img src=&#34;https://xoctye.github.io/images/hit0006.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;第二章高级语言及其文法&#34;&gt;第二章（高级语言及其文法）&lt;/h2&gt;&#xA;&lt;p&gt;G=(V,T,P,S)&lt;br&gt;&#xA;&lt;a href=&#34;https://www.bilibili.com/video/BV1P4411e7gm?t=2469.4&amp;amp;p=4&#34;&gt;https://www.bilibili.com/video/BV1P4411e7gm?t=2469.4&amp;p=4&lt;/a&gt;&#xA;&lt;a href=&#34;https://cs.nju.edu.cn/tiantan/courses/compiler-2023/index.html&#34;&gt;编译原理（Principles and Techniques of Compilers）&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;词法分析器的作用：&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;读入字符流，组成词素，输出词法单元序列&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;过滤空白、换行、制表符、注释等&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;将词素添加到符号表中&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;语法分析器的作用：&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;从词法分析器获得词法单元的序列，确认该序列是否可以由语言的文法生成&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;对于语法错误的程序，报告错误信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;对于语法正确的程序，生成语法分析树&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>算法导论</title>
      <link>https://xoctye.github.io/posts/introductiontoalgorithms/</link>
      <pubDate>Tue, 19 Nov 2024 14:41:42 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/introductiontoalgorithms/</guid>
      <description>&lt;h1 id=&#34;视频&#34;&gt;视频&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Tb411M7FA&#34;&gt;算法导论&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;lecture-01-课程简介及算法分析&#34;&gt;Lecture 01 课程简介及算法分析&lt;/h2&gt;&#xA;&lt;p&gt;//插入排序&lt;br&gt;&#xA;时间复杂度：$n^2$&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; arr[]={5,4,3,2,1};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; n=&lt;span style=&#34;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(arr)/&lt;span style=&#34;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(arr[0]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;void&lt;/span&gt; insertSort(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; arr[],&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; i,j,key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt;(i=0;i&amp;lt;n;i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        key=arr[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        j=i-1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;while&lt;/span&gt;(j&amp;gt;=0 &amp;amp;&amp;amp; arr[j]&amp;gt;key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[j+1]=arr[j];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            j=j-1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        arr[j+1]=key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;//归并排序&lt;br&gt;&#xA;时间复杂度：$n\log n$&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// 合并两个已排序的子数组&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;void&lt;/span&gt; merge(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; arr[], &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; l, &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; m, &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; i, j, k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; n1 = m - l + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; n2 = r - m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 创建临时数组&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; *L = (&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; *)malloc(n1 * &lt;span style=&#34;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; *R = (&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; *)malloc(n2 * &lt;span style=&#34;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 拷贝数据到临时数组L和R&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = 0; i &amp;lt; n1; i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L[i] = arr[l + i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (j = 0; j &amp;lt; n2; j++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        R[j] = arr[m + 1 + j];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 合并临时数组回到原数组&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    i = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    j = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    k = l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;lt; n1 &amp;amp;&amp;amp; j &amp;lt; n2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (L[i] &amp;lt;= R[j]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[k] = L[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;font-weight:bold&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[k] = R[j];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            j++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        k++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 拷贝L中剩余元素&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;lt; n1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        arr[k] = L[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        k++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 拷贝R中剩余元素&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;while&lt;/span&gt; (j &amp;lt; n2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        arr[k] = R[j];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        j++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        k++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 释放临时数组内存&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;    free(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    free(R);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// 归并排序主函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;void&lt;/span&gt; mergeSort(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; arr[], &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; l, &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (l &amp;lt; r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; m = l + (r - l) / 2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;// 分治，对左右两半分别排序&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;        mergeSort(arr, l, m);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mergeSort(arr, m + 1, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;// 合并两个已排序的子数组&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;        merge(arr, l, m, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// 打印数组函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;void&lt;/span&gt; printArray(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; arr[], &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; size; i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; main() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; arr[] = { 12, 11, 13, 5, 6, 7 };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; arr_size = &lt;span style=&#34;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(arr) / &lt;span style=&#34;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(arr[0]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;原始数组: &lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printArray(arr, arr_size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mergeSort(arr, 0, arr_size - 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;排序后的数组: &lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printArray(arr, arr_size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Tb411M7FA?t=2408.6&#34;&gt;https://www.bilibili.com/video/BV1Tb411M7FA?t=2408.6&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入理解计算机系统</title>
      <link>https://xoctye.github.io/posts/csapp/</link>
      <pubDate>Thu, 14 Nov 2024 16:42:16 +0000</pubDate>
      <guid>https://xoctye.github.io/posts/csapp/</guid>
      <description>&lt;h1 id=&#34;视频&#34;&gt;视频&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1iW411d7hd&#34;&gt;2015 CMU 15-213 CSAPP&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;lecture-01-course-overview&#34;&gt;Lecture 01 Course Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://csapp.cs.cmu.edu/&#34;&gt;相关资料&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lecture-02-bitsbytesand-integer&#34;&gt;Lecture 02 Bits,Bytes,and Integer&lt;/h2&gt;&#xA;&lt;p&gt;布尔代数&lt;br&gt;&#xA;位运算符和逻辑运算符的区别&lt;br&gt;&#xA;逻辑右移和算术右移的区别&lt;br&gt;&#xA;原码反码补码&lt;br&gt;&#xA;有符号数和无符号数&#xA;&lt;img src=&#34;https://xoctye.github.io/images/CSAPP001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lecture-03-bitsbytesand-integer-cont&#34;&gt;Lecture 03 Bits,Bytes,and Integer cont&lt;/h2&gt;&#xA;&lt;p&gt;取模&lt;br&gt;&#xA;大端序、小端序&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lecture-04-floating-point&#34;&gt;Lecture 04 Floating Point&lt;/h2&gt;&#xA;&lt;p&gt;浮点数的存储&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lecture-05-machine-level-programming-ibasics&#34;&gt;Lecture 05 Machine Level Programming I:Basics&lt;/h2&gt;&#xA;&lt;p&gt;gcc中指定优化级别的参数有：-O0、-O1、-O2、-O3、-Og、-Os、-Ofast&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lea是&lt;span style=&#34;&#34;&gt;“&lt;/span&gt;load effective address&lt;span style=&#34;&#34;&gt;”的缩写，简单的说，&lt;/span&gt;lea指令可以用来将一个内存地址直接赋给目的操作数&lt;span style=&#34;&#34;&gt;，&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;例如：&lt;/span&gt;lea eax,[ebx+8] &lt;span style=&#34;&#34;&gt;就是将&lt;/span&gt;ebx+8&lt;span style=&#34;&#34;&gt;这个值直接赋给&lt;/span&gt;eax&lt;span style=&#34;&#34;&gt;，而不是把&lt;/span&gt;ebx+8&lt;span style=&#34;&#34;&gt;处的内存地址里的数据赋给&lt;/span&gt;eax&lt;span style=&#34;&#34;&gt;。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;而&lt;/span&gt;mov指令则恰恰相反&lt;span style=&#34;&#34;&gt;，例如：&lt;/span&gt;mov eax,[ebx+8]&lt;span style=&#34;&#34;&gt;则是把内存地址为&lt;/span&gt;ebx+8&lt;span style=&#34;&#34;&gt;处的数据赋给&lt;/span&gt;eax&lt;span style=&#34;&#34;&gt;。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lecture-06-machine-level-programming-iicontrol&#34;&gt;Lecture 06 Machine Level Programming II:Control&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lecture-07-machine-level-programming-iiiprocedures&#34;&gt;Lecture 07 Machine Level Programming III:Procedures&lt;/h2&gt;&#xA;&lt;p&gt;堆栈作用&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lecture-08-machine-level-programming-ivdata&#34;&gt;Lecture 08 Machine Level Programming IV:Data&lt;/h2&gt;&#xA;&lt;p&gt;C语言中数组的边界检查问题&lt;br&gt;&#xA;数组和指针的本质区别&lt;br&gt;&#xA;内存分配&lt;br&gt;&#xA;结构体对齐、优化&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lecture-09-machine-level-programming-vadvanced-topics&#34;&gt;Lecture 09 Machine Level Programming V:Advanced Topics&lt;/h2&gt;&#xA;&lt;p&gt;内存布局&lt;br&gt;&#xA;栈溢出&lt;br&gt;&#xA;堆栈金丝雀、ALSR、DEP&lt;br&gt;&#xA;联合体、共用体&#xA;**&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
